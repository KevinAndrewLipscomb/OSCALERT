using Class_ss;
using kix;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Net;
using System.Web.Script.Serialization;

namespace Class_ss_imagetrendelite
  {
  public class TClass_ss_imagetrendelite : TClass_ss
    {

    //--
    //
    // BEGIN code generated by pasting the received JSON data into a JSON-to-C# converter (like at https://jsonutils.com/), making sure the root object is named "EmsCadList", and making sure the accessibilities are at least "internal".
    //
    //--
    //
    public class Column
      {
      public string Name { get; set; }
      public string Value { get; set; }
      public string DataType { get; set; }
      }

    public class Record
      {
      public IList<Column> Columns { get; set; }
      }

    public class EmsCadList
      {
      public object ErrorMessage { get; set; }
      public int TotalRecordCount { get; set; }
      public IList<Record> Records { get; set; }
      public object ChildView { get; set; }
      public string RequestIdentifier { get; set; }
      public int NewDynamicListEngineUsed { get; set; }
      }
    //
    //--
    //
    // END
    //
    //--

    private static class Static
      {
      public static string USER_AGENT_DESIGNATOR = ConfigurationManager.AppSettings["ss_user_agent_designator"];
      }

    private bool Request_www_imagetrendelite_com_Signin
      (
      string username,
      string password,
      out HttpWebResponse response
      )
      {
	    response = null;

	    try
	    {
		    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://www.imagetrendelite.com/Elite/AuthAPI/Authenticate?organizationId=VBEMS");
        Normalize(request);

		    request.Accept = "*/*";
		    request.Headers.Add("X-Requested-With", @"XMLHttpRequest");
		    request.ContentType = "application/json";
		    request.Referer = "https://www.imagetrendelite.com/Elite/?organizationId=VBEMS";
		    request.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-US");
		    request.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate");
		    request.UserAgent = Static.USER_AGENT_DESIGNATOR;
		    request.Headers.Set(HttpRequestHeader.CacheControl, "no-cache");

		    request.Method = "POST";
		    request.ServicePoint.Expect100Continue = false;

		    string body = k.EMPTY
        + "{"
        + k.QUOTE + "identifier" + k.QUOTE + ":" + k.QUOTE + username + k.QUOTE + ","
        + k.QUOTE + "passkey" + k.QUOTE + ":" + k.QUOTE + password + k.QUOTE + ","
        + k.QUOTE + "organizationId" + k.QUOTE + ":" + k.QUOTE + "vbems" + k.QUOTE
        + "}";
		    byte[] postBytes = System.Text.Encoding.UTF8.GetBytes(body);
		    request.ContentLength = postBytes.Length;
		    Stream stream = request.GetRequestStream();
		    stream.Write(postBytes, 0, postBytes.Length);
		    stream.Close();

		    response = (HttpWebResponse)request.GetResponse();
	    }
	    catch (WebException e)
	    {
		    if (e.Status == WebExceptionStatus.ProtocolError) response = (HttpWebResponse)e.Response;
		    else return false;
	    }
	    catch (Exception)
	    {
		    if(response != null) response.Close();
		    return false;
	    }

	    return true;
      }

    private bool Request_www_imagetrendelite_com_Get1
      (
      string authorization_token,
      out HttpWebResponse response
      )
      {
	    response = null;

	    try
	    {
		    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://www.imagetrendelite.com/Elite/Organizationvbems/Agency00404/DynamicListAPIController/GetDynamicListViews?dynamicListViewTypeName=ViewAllEMSCADList");
        Normalize(request);

		    request.Accept = "*/*";
		    request.Headers.Add("X-Requested-With", @"XMLHttpRequest");
		    request.Headers.Set(HttpRequestHeader.Authorization, authorization_token);
		    request.Referer = "https://www.imagetrendelite.com/Elite/Organizationvbems/Agency00404/RunForm/CadList?startingFilter=ems";
		    request.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-US");
		    request.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate");
		    request.UserAgent = Static.USER_AGENT_DESIGNATOR;

		    response = (HttpWebResponse)request.GetResponse();
	    }
	    catch (WebException e)
	    {
		    if (e.Status == WebExceptionStatus.ProtocolError) response = (HttpWebResponse)e.Response;
		    else return false;
	    }
	    catch (Exception)
	    {
		    if(response != null) response.Close();
		    return false;
	    }

	    return true;
      }

    private bool Request_www_imagetrendelite_com_Get2
      (
      string authorization_token,
      out HttpWebResponse response
      )
      {
	    response = null;

	    try
	    {
		    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://www.imagetrendelite.com/Elite/Organizationvbems/Agency00404/DynamicListAPIController/GetDynamicListViewByID?dynamicListViewModelID=910a358f-b03d-489a-bbe0-39d64ebc08cb");
        Normalize(request);

		    request.Accept = "*/*";
		    request.Headers.Add("X-Requested-With", @"XMLHttpRequest");
		    request.Headers.Set(HttpRequestHeader.Authorization, authorization_token);
		    request.Referer = "https://www.imagetrendelite.com/Elite/Organizationvbems/Agency00404/RunForm/CadList?startingFilter=ems";
		    request.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-US");
		    request.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate");
		    request.UserAgent = Static.USER_AGENT_DESIGNATOR;

		    response = (HttpWebResponse)request.GetResponse();
	    }
	    catch (WebException e)
	    {
		    if (e.Status == WebExceptionStatus.ProtocolError) response = (HttpWebResponse)e.Response;
		    else return false;
	    }
	    catch (Exception)
	    {
		    if(response != null) response.Close();
		    return false;
	    }

	    return true;
      }

    private bool Request_www_imagetrendelite_com_Load
      (
      string authorization_token,
      StreamWriter log,
      out HttpWebResponse response
      )
      {
	    response = null;

	    try
	    {
		    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://www.imagetrendelite.com/Elite/Organizationvbems/Agency00404/DynamicListAPIController/LoadDynamicListRecords?skip=0&pageSize=200&search=&comparisonType=STARTSWITH&sortColumn=UnitNotifiedByDispatch&sortAscending=false&viewID=910a358f-b03d-489a-bbe0-39d64ebc08cb&includeTotalRecordCount=false");
          // The following additional GET parameter appears not to be strictly necessary:  &RequestIdentifier=8513f56b-e453-4ae7-8ffd-be1a46975429
        Normalize(request);

		    request.Accept = "*/*";
		    request.Headers.Add("X-Requested-With", @"XMLHttpRequest");
		    request.Headers.Set(HttpRequestHeader.Authorization, authorization_token);
		    request.Referer = "https://www.imagetrendelite.com/Elite/Organizationvbems/Agency00404/RunForm/CadList?startingFilter=ems";
		    request.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-US");
		    request.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate");
		    request.UserAgent = Static.USER_AGENT_DESIGNATOR;

		    response = (HttpWebResponse)request.GetResponse();
	    }
	    catch (WebException e)
	    {
		    if (e.Status == WebExceptionStatus.ProtocolError)
          {
          response = (HttpWebResponse)e.Response;
          }
		    else
          {
          log.WriteLine(DateTime.Now.ToString("s") + "TClass_ss_imagetrendelite.Request_www_imagetrendelite_com_Load: " + e.ToString() + k.NEW_LINE);
          return false;
          }
	    }
	    catch (Exception e)
	    {
		    if (response != null) response.Close();
        log.WriteLine(DateTime.Now.ToString("s") + "TClass_ss_imagetrendelite.Request_www_imagetrendelite_com_Load: " + e.ToString() + k.NEW_LINE);
		    return false;
	    }

	    return true;
      }

    internal string AuthorizationTokenOf
      (
      string username,
      string password
      )
      {
      HttpWebResponse response;
      if(!Request_www_imagetrendelite_com_Signin
          (
          username:ConfigurationManager.AppSettings["vbemsbridge_username"],
          password:ConfigurationManager.AppSettings["vbemsbridge_password"],
          response:out response
          )
        )
        {
        throw new Exception("Request_www_imagetrendelite_com_Signin() returned FALSE.");
        }
      var authorization_token = response.Headers.Get("Authorization");
      HtmlDocumentOf(ConsumedStreamOf(response));
      return authorization_token;
      }

    internal void Nudge(string authorization_token)
      {
      HttpWebResponse response;
      if(!Request_www_imagetrendelite_com_Get1
          (
          authorization_token:authorization_token,
          response:out response
          )
        )
        {
        throw new Exception("Request_www_imagetrendelite_com_Get1() returned FALSE.");
        }
      HtmlDocumentOf(ConsumedStreamOf(response));
      //
      if(!Request_www_imagetrendelite_com_Get2
          (
          authorization_token:authorization_token,
          response:out response
          )
        )
        {
        throw new Exception("Request_www_imagetrendelite_com_Get2() returned FALSE.");
        }
      HtmlDocumentOf(ConsumedStreamOf(response));
      }

    internal EmsCadList CurrentEmsCadList
      (
      string authorization_token,
      StreamWriter log
      )
      {
      HttpWebResponse response;
      if(!Request_www_imagetrendelite_com_Load
          (
          authorization_token:authorization_token,
          log:log,
          response:out response
          )
        )
        {
        throw new Exception("Request_www_imagetrendelite_com_Load() returned FALSE.");
        }
      //
      EmsCadList current_ems_cad_list = null;
      var text = HtmlDocumentOf(ConsumedStreamOf(response)).DocumentNode.InnerText;
      if (text.Contains("Server Error"))
        {
        log.WriteLine(DateTime.Now.ToString("s") + "***From TClass_ss_imagetrendelite.Request_www_imagetrendelite_com_Load, got: SERVER ERROR");
        }
      else if (text.Contains("Site Temporarily Offline"))
        {
        log.WriteLine(DateTime.Now.ToString("s") + "***From TClass_ss_imagetrendelite.Request_www_imagetrendelite_com_Load, got: SITE TEMPORARILY OFFLINE");
        }
      else if (text.Contains("Service Unavailable"))
        {
        log.WriteLine(DateTime.Now.ToString("s") + "***From TClass_ss_imagetrendelite.Request_www_imagetrendelite_com_Load, got: SERVICE UNAVAILABLE");
        }
      else if (text.Contains("Forbidden Access"))
        {
        log.WriteLine(DateTime.Now.ToString("s") + "***From TClass_ss_imagetrendelite.Request_www_imagetrendelite_com_Load, got: FORBIDDEN ACCESS");
        }
      else
        {
        try
          {
          current_ems_cad_list = new JavaScriptSerializer().Deserialize<EmsCadList>(text);
          }
        catch (Exception the_exception)
          {
          log.WriteLine(DateTime.Now.ToString("s") + "***From TClass_ss_imagetrendelite.Request_www_imagetrendelite_com_Load, got: UNHANDLED " + the_exception.ToString() + k.NEW_LINE + text);
          }
        }
      return current_ems_cad_list;
      }

    }
  }
